/*
6 Explain react component life cycle ?
*/
Ans:-
In React, the component lifecycle refers to the various stages a component goes through, from its creation and rendering to updates and removal from the DOM. The lifecycle methods allow you to perform specific actions at different points in a component's lifecycle. However, it's important to note that with the introduction of React Hooks, the traditional class-based lifecycle methods have been partially replaced by the useEffect hook in function components.

Here is an overview of the different phases in the component lifecycle:

1.Mounting Phase:

constructor(): This method is called when a component is being initialized and constructed. It is typically used to initialize state and bind event handlers.
static getDerivedStateFromProps(props, state): This static method is rarely used, but it allows the component to update its state based on changes in props. It returns an object to update the state or null to indicate no state update is needed.
render(): This method is responsible for rendering the component's UI based on the current state and props. It returns JSX or null.
componentDidMount(): This method is called immediately after the component is mounted (inserted into the DOM). It is commonly used for fetching data from an API, setting up subscriptions, or initializing third-party libraries.


2.Updating Phase:

static getDerivedStateFromProps(props, state): This method is called when the component receives new props. It is rarely used and has limited use cases.
shouldComponentUpdate(nextProps, nextState): This method is used to determine if the component should re-render or not. It allows you to optimize performance by preventing unnecessary re-renders. By default, it returns true.
render(): This method is called to update the component's UI.
getSnapshotBeforeUpdate(prevProps, prevState): This method is rarely used, but it allows the component to capture some information from the DOM before it gets potentially updated.
componentDidUpdate(prevProps, prevState, snapshot): This method is called after the component has been updated. It is typically used for side effects, such as updating the DOM, making additional API calls, or updating state based on prop changes.


3.Unmounting Phase:

componentWillUnmount(): This method is called right before the component is unmounted and removed from the DOM. It is commonly used to clean up resources, cancel subscriptions, or remove event listeners.
Error Handling Phase:

static getDerivedStateFromError(error): This static method is used to handle errors during rendering. It allows the component to update its state based on the error and render an alternative UI.
componentDidCatch(error, info): This method is used to catch and handle errors that occur during the rendering of a component's children. It is commonly used for error logging and displaying fallback UIs.
It's important to note that with the introduction of React Hooks, function components can achieve similar functionality to class-based lifecycle methods using the useEffect hook. The useEffect hook combines the functionalities of multiple lifecycle methods and provides a way to perform side effects, subscribe to changes, and clean up resources.

Understanding the component lifecycle is crucial for managing state, performing side effects, and optimizing performance in React applications. However, with the widespread adoption of function components and hooks, the usage of traditional class-based lifecycle methods has decreased.
