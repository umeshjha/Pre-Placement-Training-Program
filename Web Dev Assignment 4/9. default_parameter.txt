/*
9 How can you define default parameter values in ES6 functions?
*/
Ans:-
In ECMAScript 6 (ES6), you can define default parameter values for function parameters. Default parameter values allow you to specify fallback values that are used when the corresponding arguments are not provided or are undefined. Here's how you can define default parameter values in ES6 functions:

javascript

function greet(name = 'Guest') {
  console.log(`Hello, ${name}!`);
}

greet(); // Output: Hello, Guest!
greet('John'); // Output: Hello, John!

In this example, the greet() function has a single parameter name with a default value of 'Guest'. If no argument is passed to the function or if undefined is explicitly provided as the argument, the default value 'Guest' is used. When calling greet(), the output will be "Hello, Guest!". When calling greet('John'), the output will be "Hello, John!".

You can also use expressions or function calls as default parameter values:

javascript

function multiply(a, b = 2) {
  return a * b;
}

console.log(multiply(3)); // Output: 6
console.log(multiply(3, 4)); // Output: 12

In this example, the multiply() function has two parameters, a and b. The default value of b is set to 2. If the second argument is not provided or is undefined, the default value of 2 will be used. When calling multiply(3), the output will be 6. When calling multiply(3, 4), the output will be 12.

It's important to note that default parameter values are evaluated at the time of function invocation. This means that if the default value is an expression or a function call, it will be evaluated each time the function is called.

Default parameter values provide a convenient way to handle missing or undefined arguments in function parameters, allowing for more flexible and robust function definitions.