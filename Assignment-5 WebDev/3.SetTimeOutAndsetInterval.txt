/*
3 Explain SetTimeOut and setInterval ?
*/
Ans:-
Both setTimeout and setInterval are functions in JavaScript that allow you to schedule the execution of a function or a block of code after a specified delay. They are commonly used for implementing timed actions, animations, periodic updates, and other time-dependent operations in web development.

Here's an explanation of setTimeout and setInterval:

1.setTimeout:

The setTimeout function is used to execute a function or evaluate an expression once after a specified delay.
It takes two parameters: the function or expression to be executed, and the delay in milliseconds before execution.
Example usage:

javascript

setTimeout(function() {
  // code to be executed after the delay
}, 2000); // executes after 2000 milliseconds (2 seconds)

The setTimeout function returns a unique identifier (a numeric value) that can be used to cancel the execution before the delay has passed, using the clearTimeout function.

2.setInterval:

The setInterval function is used to repeatedly execute a function or evaluate an expression at a specified interval.
It takes two parameters: the function or expression to be executed, and the interval in milliseconds between each execution.
Example usage:

javascript

setInterval(function() {
  // code to be executed at each interval
}, 1000); // executes every 1000 milliseconds (1 second)

The setInterval function also returns a unique identifier that can be used to stop the repeated execution, using the clearInterval function.
It's important to note that both setTimeout and setInterval are asynchronous functions, meaning that they do not block the execution of the remaining code. Instead, they schedule the specified function or expression to be executed in the future, allowing the program to continue running.

Additionally, it's crucial to manage the cleanup of setTimeout and setInterval to avoid memory leaks and unnecessary resource consumption. To stop the execution scheduled by setTimeout or setInterval before it happens, you can use the clearTimeout and clearInterval functions, respectively. These functions take the unique identifier returned by setTimeout or setInterval as a parameter to cancel the execution.

For example:

javascript

var timeoutId = setTimeout(function() {
  // code to be executed after the delay
}, 2000);

// To cancel the execution before the delay
clearTimeout(timeoutId);
javascript

var intervalId = setInterval(function() {
  // code to be executed at each interval
}, 1000);

// To stop the repeated execution
clearInterval(intervalId);
By using setTimeout and setInterval, you can introduce time-based behavior and create dynamic and interactive experiences in your JavaScript applications.