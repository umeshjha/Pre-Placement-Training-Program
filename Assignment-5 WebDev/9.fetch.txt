/*
9 Explain fetch?
*/
Ans:-
fetch is a built-in JavaScript function introduced in ES2015 (ES6) that allows making asynchronous HTTP requests to fetch resources from a network. It provides a modern alternative to older methods like XMLHttpRequest (XHR) for sending and receiving data over the web.

The fetch function returns a Promise that resolves to the Response object representing the server's response to the request. The Response object encapsulates the HTTP response details, including the status, headers, and body.

Here's a basic example of using fetch to make a GET request:

javascript

fetch('https://api.example.com/data')
  .then(function(response) {
    if (response.ok) {
      return response.json(); // Parse the response as JSON
    } else {
      throw new Error('Request failed with status: ' + response.status);
    }
  })
  .then(function(data) {
    console.log(data); // Handle the retrieved data
  })
  .catch(function(error) {
    console.log('Error:', error.message); // Handle errors, if any
  });

In the example above:

1.The fetch function is called with the URL as the first argument, which specifies the resource to retrieve.
2.The returned Promise is then chained with the .then() method to handle the response. If the response is successful (HTTP status code 200-299), the .json() method is called on the response to parse the body as JSON. If the response is not successful, an error is thrown.
3.Another .then() is used to handle the parsed JSON data.
4. A catch() block is included to handle any errors that may occur during the request or response.
The fetch function supports various options and configurations for making requests, including specifying request methods (GET, POST, etc.), headers, request bodies, authentication, and more. It is flexible and widely used in web development for interacting with APIs and fetching data from servers.

It's important to note that the fetch function is built on Promises, so it can be used with async/await for a more synchronous-like code structure when dealing with asynchronous requests.

Additionally, the fetch function does not handle network errors like connection failures or timeouts. It only catches errors related to the request/response itself. To handle network errors, you can wrap the fetch call in a try/catch block or use a library or utility that provides additional error handling capabilities.

Overall, fetch is a powerful and versatile function for making asynchronous HTTP requests in JavaScript, allowing for seamless data retrieval and interaction with web APIs.